[project]
name = "sunray"
version = "0.13.0" # version anchor
authors = [{ name = "ZhengYu, Xu", email = "zen-xu@outlook.com" }]
description = "More robust ray"
readme = "README.md"
requires-python = ">=3.9,<4"
classifiers = [
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["ray[default] >=2.20,<3", "typing-extensions >=4.5.0,<5"]

[project.optional-dependencies]
test = [
  "pytest >=8,<9",
  "pytest-cov >=4.1",
  "nox >=2024.4.15",
  "deepdiff >=6.7.1",
  "importlib-metadata >=6.7.0",
  "mypy >=1.9; python_version >= '3.10'",
  "pytest-mypy-plugins>=3; python_version >= '3.10'",
]

[tool.commitizen]
bump_message  = "chore(release): bump version $current_version -> $new_version"
version       = "0.13.0"                                                        # version anchor
version_files = ["pyproject.toml:version anchor", "sunray/__init__.py"]

[build-system]
requires      = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
extend-exclude = [
  "docs/*",
  # External to the project's coding standards
  "tests/**/fixtures/*",
]
fix = true
line-length = 88
target-version = "py39"

[tool.ruff.lint]
extend-select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "ERA", # flake8-eradicate/eradicate
  "I",   # isort
  "N",   # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep
  "RUF", # ruff checks
  "SIM", # flake8-simplify
  "TC",  # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
]
ignore = [
  "B904", # use 'raise ... from err'
  "B905", # use explicit 'strict=' parameter with 'zip()'
  "N818", # Exception name should be named with an Error suffix
]
unfixable = [
  "ERA", # do not auto remove commented out code
]

[tool.ruff.lint.isort]
force-single-line   = true
known-first-party   = ["sunray"]
lines-after-imports = 2
lines-between-types = 1
required-imports    = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
disable_error_code     = ["overload-overlap", "import-not-found", "import-untyped"]
explicit_package_bases = true
files                  = "sunray"
namespace_packages     = true
show_error_codes       = true

[tool.coverage.run]
branch = true
source = ["sunray"]
omit = [
  "sunray/**/__init__.py",
  "sunray/_internal/typing.py",
  "sunray/_internal/callable.py",
]

[tool.coverage.report]
exclude_lines = [
  "^\\s*if TYPE_CHECKING:",
  "@overload( |$)",
  "def __repr__",
  "def __str__",
  "import",
  "pragma: no cover",
  "if self\\.debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "@abc\\.abstractmethod",
  "@abstractmethod",
  "if 0:",
  "if __name__ == .__main__.:",
  "def __reduce__",
]
